// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8389224194934376797),
    name: 'Camera',
    lastPropertyId: const obx_int.IdUid(3, 4706244820305147424),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5668045976753399270),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7994559052489606),
        name: 'name',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(1, 810695139669244375),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4706244820305147424),
        name: 'unreadMessages',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 2694203379812396816),
    name: 'Video',
    lastPropertyId: const obx_int.IdUid(5, 4048055400990323206),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2060005644598737486),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5184179301129026563),
        name: 'camera',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4854843348949567277),
        name: 'video',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(2, 9006837534420486771),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4353268878583621277),
        name: 'received',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4048055400990323206),
        name: 'motion',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 6234359154707246677),
    name: 'Meta',
    lastPropertyId: const obx_int.IdUid(2, 535086818200965587),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8194352013682617878),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 535086818200965587),
        name: 'dbVersion',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 6234359154707246677),
    lastIndexId: const obx_int.IdUid(2, 9006837534420486771),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Camera: obx_int.EntityDefinition<Camera>(
      model: _entities[0],
      toOneRelations: (Camera object) => [],
      toManyRelations: (Camera object) => {},
      getId: (Camera object) => object.id,
      setId: (Camera object, int id) {
        object.id = id;
      },
      objectToFB: (Camera object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addBool(2, object.unreadMessages);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final unreadMessagesParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object = Camera(
          nameParam,
          unreadMessages: unreadMessagesParam,
          id: idParam,
        );

        return object;
      },
    ),
    Video: obx_int.EntityDefinition<Video>(
      model: _entities[1],
      toOneRelations: (Video object) => [],
      toManyRelations: (Video object) => {},
      getId: (Video object) => object.id,
      setId: (Video object, int id) {
        object.id = id;
      },
      objectToFB: (Video object, fb.Builder fbb) {
        final cameraOffset = fbb.writeString(object.camera);
        final videoOffset = fbb.writeString(object.video);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, cameraOffset);
        fbb.addOffset(2, videoOffset);
        fbb.addBool(3, object.received);
        fbb.addBool(4, object.motion);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final cameraParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final videoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final receivedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final motionParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object = Video(
          cameraParam,
          videoParam,
          receivedParam,
          motionParam,
          id: idParam,
        );

        return object;
      },
    ),
    Meta: obx_int.EntityDefinition<Meta>(
      model: _entities[2],
      toOneRelations: (Meta object) => [],
      toManyRelations: (Meta object) => {},
      getId: (Meta object) => object.id,
      setId: (Meta object, int id) {
        object.id = id;
      },
      objectToFB: (Meta object, fb.Builder fbb) {
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.dbVersion);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dbVersionParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = Meta(dbVersion: dbVersionParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Camera] entity fields to define ObjectBox queries.
class Camera_ {
  /// See [Camera.id].
  static final id = obx.QueryIntegerProperty<Camera>(
    _entities[0].properties[0],
  );

  /// See [Camera.name].
  static final name = obx.QueryStringProperty<Camera>(
    _entities[0].properties[1],
  );

  /// See [Camera.unreadMessages].
  static final unreadMessages = obx.QueryBooleanProperty<Camera>(
    _entities[0].properties[2],
  );
}

/// [Video] entity fields to define ObjectBox queries.
class Video_ {
  /// See [Video.id].
  static final id = obx.QueryIntegerProperty<Video>(_entities[1].properties[0]);

  /// See [Video.camera].
  static final camera = obx.QueryStringProperty<Video>(
    _entities[1].properties[1],
  );

  /// See [Video.video].
  static final video = obx.QueryStringProperty<Video>(
    _entities[1].properties[2],
  );

  /// See [Video.received].
  static final received = obx.QueryBooleanProperty<Video>(
    _entities[1].properties[3],
  );

  /// See [Video.motion].
  static final motion = obx.QueryBooleanProperty<Video>(
    _entities[1].properties[4],
  );
}

/// [Meta] entity fields to define ObjectBox queries.
class Meta_ {
  /// See [Meta.id].
  static final id = obx.QueryIntegerProperty<Meta>(_entities[2].properties[0]);

  /// See [Meta.dbVersion].
  static final dbVersion = obx.QueryIntegerProperty<Meta>(
    _entities[2].properties[1],
  );
}
