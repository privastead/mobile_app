// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'logmod.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `record_to_entry`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `SEND_TO_DART_LOGGER_STREAM_SINK`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `as_log`, `as_log`, `config`, `config`, `deref`, `enabled`, `enabled`, `flush`, `flush`, `initialize`, `level`, `level`, `log`, `log`

Future<void> initLogger() => RustLib.instance.api.crateApiLoggerInitLogger();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMobileLogger>>
abstract class MyMobileLogger implements RustOpaqueInterface {
  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<MyMobileLogger> newInstance({required LevelFilter level}) =>
      RustLib.instance.api.crateApiLoggerMyMobileLoggerNew(level: level);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendToDartLogger>>
abstract class SendToDartLogger implements RustOpaqueInterface {
  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<SendToDartLogger> newInstance({required LevelFilter level}) =>
      RustLib.instance.api.crateApiLoggerSendToDartLoggerNew(level: level);

  static Stream<LogEntry> setStreamSink() =>
      RustLib.instance.api.crateApiLoggerSendToDartLoggerSetStreamSink();
}
