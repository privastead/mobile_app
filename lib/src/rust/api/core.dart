// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `get_app_name`, `pair_with_camera`, `perform_pairing_handshake`, `process_welcome_message`, `read_next_msg_from_file`, `read_varying_len`, `send_wifi_info`, `write_varying_len`

Future<bool> addCamera({
  required OptionBoxClients clientsReg,
  required String cameraName,
  required String cameraIp,
  required List<int> secretVec,
  required bool standaloneCamera,
  required String wifiSsid,
  required String wifiPassword,
}) => RustLib.instance.api.crateApiCoreAddCamera(
  clientsReg: clientsReg,
  cameraName: cameraName,
  cameraIp: cameraIp,
  secretVec: secretVec,
  standaloneCamera: standaloneCamera,
  wifiSsid: wifiSsid,
  wifiPassword: wifiPassword,
);

Future<bool> initialize({
  required OptionBoxClients clients,
  required String fileDir,
  required bool firstTime,
}) => RustLib.instance.api.crateApiCoreInitialize(
  clients: clients,
  fileDir: fileDir,
  firstTime: firstTime,
);

Future<String> decryptVideo({
  required OptionBoxClients clients,
  required String encryptedFilename,
}) => RustLib.instance.api.crateApiCoreDecryptVideo(
  clients: clients,
  encryptedFilename: encryptedFilename,
);

Future<String> decryptFcmMessage({
  required OptionBoxClients clients,
  required List<int> message,
}) => RustLib.instance.api.crateApiCoreDecryptFcmMessage(
  clients: clients,
  message: message,
);

Future<String> getMotionGroupName({
  required OptionBoxClients clients,
  required String cameraName,
}) => RustLib.instance.api.crateApiCoreGetMotionGroupName(
  clients: clients,
  cameraName: cameraName,
);

Future<String> getLivestreamGroupName({
  required OptionBoxClients clients,
  required String cameraName,
}) => RustLib.instance.api.crateApiCoreGetLivestreamGroupName(
  clients: clients,
  cameraName: cameraName,
);

Future<Uint8List> livestreamDecrypt({
  required OptionBoxClients clients,
  required List<int> encData,
  required BigInt expectedChunkNumber,
}) => RustLib.instance.api.crateApiCoreLivestreamDecrypt(
  clients: clients,
  encData: encData,
  expectedChunkNumber: expectedChunkNumber,
);

Future<void> livestreamUpdate({
  required OptionBoxClients clients,
  required List<int> updatesMsg,
}) => RustLib.instance.api.crateApiCoreLivestreamUpdate(
  clients: clients,
  updatesMsg: updatesMsg,
);

Future<void> deregister({required OptionBoxClients clients}) =>
    RustLib.instance.api.crateApiCoreDeregister(clients: clients);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Clients>>
abstract class Clients implements RustOpaqueInterface {
  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Clients> newInstance({
    required String appMotionName,
    required String appLivestreamName,
    required String appFcmName,
    required String appConfigName,
    required bool firstTime,
    required String fileDir,
  }) => RustLib.instance.api.crateApiCoreClientsNew(
    appMotionName: appMotionName,
    appLivestreamName: appLivestreamName,
    appFcmName: appFcmName,
    appConfigName: appConfigName,
    firstTime: firstTime,
    fileDir: fileDir,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Option < Box < Clients > >>>
abstract class OptionBoxClients implements RustOpaqueInterface {}
