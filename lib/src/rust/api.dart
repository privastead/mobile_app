// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<bool> initializeCamera({
  required String cameraName,
  required String fileDir,
  required bool firstTime,
}) => RustLib.instance.api.crateApiInitializeCamera(
  cameraName: cameraName,
  fileDir: fileDir,
  firstTime: firstTime,
);

Future<void> deregisterCamera({required String cameraName}) =>
    RustLib.instance.api.crateApiDeregisterCamera(cameraName: cameraName);

Future<String> decryptVideo({
  required String cameraName,
  required String encFilename,
}) => RustLib.instance.api.crateApiDecryptVideo(
  cameraName: cameraName,
  encFilename: encFilename,
);

Future<bool> flutterAddCamera({
  required String cameraName,
  required String ip,
  required List<int> secret,
  required bool standalone,
  required String ssid,
  required String password,
}) => RustLib.instance.api.crateApiFlutterAddCamera(
  cameraName: cameraName,
  ip: ip,
  secret: secret,
  standalone: standalone,
  ssid: ssid,
  password: password,
);

Future<bool> pingProprietaryDevice({required String cameraIp}) =>
    RustLib.instance.api.crateApiPingProprietaryDevice(cameraIp: cameraIp);

Future<String> decryptFcmMessage({
  required String cameraName,
  required List<int> data,
}) => RustLib.instance.api.crateApiDecryptFcmMessage(
  cameraName: cameraName,
  data: data,
);

Future<String> getMotionGroupName({required String cameraName}) =>
    RustLib.instance.api.crateApiGetMotionGroupName(cameraName: cameraName);

Future<bool> livestreamUpdate({
  required String cameraName,
  required List<int> msg,
}) => RustLib.instance.api.crateApiLivestreamUpdate(
  cameraName: cameraName,
  msg: msg,
);

Future<Uint8List> livestreamDecrypt({
  required String cameraName,
  required List<int> data,
  required BigInt expectedChunkNumber,
}) => RustLib.instance.api.crateApiLivestreamDecrypt(
  cameraName: cameraName,
  data: data,
  expectedChunkNumber: expectedChunkNumber,
);

Future<String> getLivestreamGroupName({required String cameraName}) =>
    RustLib.instance.api.crateApiGetLivestreamGroupName(cameraName: cameraName);
